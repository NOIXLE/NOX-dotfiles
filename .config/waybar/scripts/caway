#!/usr/bin/env bash

# Oh boy, it's this script, hi!
# I took this from someone else's dotfiles, should be linked in the github
# Just read the options here, or execute this script with the '-h' argument to see the options

# Also check comments in this file for specific modifications you may want

BARS=8
FRAMERATE=60
EQUILIZER=1

# Get options
while getopts 'b:f:eh' flag; do
    case "${flag}" in
        b) BARS="${OPTARG}" ;;
        f) FRAMERATE="${OPTARG}" ;;
        e) EQUILIZER=0 ;;
        h)
            echo "Usage: caway [options]"
            echo "  -b <bars>     Number of bars (default: 8)"
            echo "  -f <fps>      Framerate (default: 60)"
            echo "  -e            Disable equalizer"
            echo "  -h            Show help"
            exit 0
            ;;
    esac
done

ID=$(uuidgen)
cava_pipe="/tmp/cava_waybar_${ID}.fifo"
playerctl_pipe="/tmp/playerctl_waybar_${ID}.fifo"
cava_pid_file="/tmp/cava_waybar_${ID}.pid"
cava_config="/tmp/cava_waybar_${ID}.conf"
PIDS=()

cleanup() {
    echo "Cleaning up..."
    for pid in "${PIDS[@]}"; do
        kill "$pid" 2>/dev/null
    done

    [[ -f "$cava_pid_file" ]] && while read -r pid; do
        kill "$pid" 2>/dev/null
    done < "$cava_pid_file"

    rm -f "$cava_pipe" "$playerctl_pipe" "$cava_config" "$cava_pid_file"
    exit 0
}
trap cleanup SIGINT SIGTERM EXIT

mkfifo "$cava_pipe"
mkfifo "$playerctl_pipe"

cat <<EOF > "$cava_config"
[general]
mode = normal
framerate = $FRAMERATE
bars = $BARS
autosens = 0
sensitivity = 2000

[output]
method = raw
raw_target = $cava_pipe
data_format = ascii
ascii_max_range = 7
EOF

bar="▁▂▃▄▅▆▇█"
dict="s/;//g;"
for i in $(seq 0 7); do
    dict="${dict}s/$i/${bar:$i:1}/g;"
done
dict="${dict}s/.$//;"

emit_stopped() {
    echo '{"text": "", "class": "Stopped", "alt": "Stopped"}'
}

(
    last_output_time=$(date +%s)
    emit_stopped

    while true; do
        if read -t 1 -r line < "$playerctl_pipe"; then
            player_name=$(echo "$line" | jq -r '.tooltip' | cut -d' ' -f1)
            [[ "$player_name" != "spotify" ]] && continue                   # this line checks if you are using spotify as a player (can change this)

            last_output_time=$(date +%s)

            title=$(echo "$line" | jq -r '.text' | cut -d'-' -f1 | sed 's/ *$//')
            artist=$(echo "$line" | jq -r '.text' | cut -d'-' -f2- | sed 's/^ *//')
            album=$(playerctl -p spotify metadata xesam:album 2>/dev/null || echo "Unknown Album")  # extracts metadata from spotify (can change this)

            # Format tooltip with newlines
            tooltip=$(printf " %s\n%s\n%s\n%s" "$title" "$artist" "$album") # tooltip format (can changes this too, includes spotify logo)


            # Kill existing cava if needed
            if [[ -f "$cava_pid_file" ]]; then
                while read -r pid; do
                    kill "$pid" 2>/dev/null
                done < "$cava_pid_file"
                rm -f "$cava_pid_file"
            fi

            echo "$line" | jq --unbuffered --compact-output --arg tip "$tooltip" '.tooltip = $tip'

            if [[ $EQUILIZER == 1 && $(echo "$line" | jq -r '.class') == "Playing" ]]; then
                cava -p "$cava_config" > "$cava_pipe" &
                cava_pid=$!
                echo $cava_pid > "$cava_pid_file"

                (
                    while read -r bars; do
                        echo "$line" | jq --arg a "$(echo "$bars" | sed "$dict")" --arg tip "$tooltip" \
                            '.text = $a | .tooltip = $tip' --unbuffered --compact-output
                    done < "$cava_pipe"
                ) &
                PIDS+=($! "$cava_pid")
                echo $! >> "$cava_pid_file"
            fi
        else
            now=$(date +%s)
            if (( now - last_output_time > 5 )); then
            # this WHOLE IF checks for playerctl with spotify, have fun changing this, should've made a variable in retrospect (can change this)
                if playerctl -p spotify status &>/dev/null; then 
                    status=$(playerctl -p spotify status)
                    title=$(playerctl -p spotify metadata xesam:title 2>/dev/null)
                    artist=$(playerctl -p spotify metadata xesam:artist 2>/dev/null)
                    album=$(playerctl -p spotify metadata xesam:album 2>/dev/null)
                    tooltip=$(printf " %s\n%s\n%s\n%s" "$title" "$artist" "$album")

                    echo "{\"text\": \"$title - $artist\", \"tooltip\": \"$tooltip\", \"alt\": \"$status\", \"class\": \"$status\"}"
                else
                    emit_stopped
                fi
                last_output_time=$now
            fi
        fi
    done
) &
PIDS+=($!)

# Start metadata feed
playerctl -a metadata --format '{"text": "{{title}} - {{artist}}", "tooltip": "{{playerName}} : {{markup_escape(title)}} - {{markup_escape(artist)}}", "alt": "{{status}}", "class": "{{status}}"}' -F > "$playerctl_pipe" &
PIDS+=($!)

wait
